" ================================================
" Basic Setup
" ================================================

" Disable Vi compatibility mode to enable more advanced features
set nocompatible

" Set file encoding to UTF-8
set encoding=utf-8

" Convert tabs to spaces, 4 for tab key, 4 for autoindent
set expandtab
set tabstop=4
set shiftwidth=4

" Highlight all search results
set hlsearch

" Indicate tabs as ⁐⁐ and trailing spaces as ·
set list
exec "set listchars=tab:\u2050\u2050,trail:\uB7"

" Prevent mouse clicks from changing cursor position
" (Makes selecting to copy without holding shift possible)
set mouse=r

" Enable syntax highlighting
syntax on

" Full syntax highlighting for Python
let python_highlight_all=1

" Configure backspace key to work in various contexts
set backspace=indent,eol,start

" Faster startup
let g:python3_host_prog = system('which python3')  " Update this line
set lazyredraw                                " Don't redraw while executing macros

" ================================================
" File Specific Settings
" ================================================

" Python Indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4
    \| set softtabstop=4
    \| set shiftwidth=4
    \| set fileformat=unix
    \| set expandtab
    \| set autoindent

" JavaScript, TypeScript, HTML, CSS Indentation
au BufNewFile,BufRead *.js,*.ts,*.tsx,*.html,*.css,*.scss
    \ set tabstop=2
    \| set softtabstop=2
    \| set shiftwidth=2
    \| set fileformat=unix

" ================================================
" Split Window Settings
" ================================================

" Minimum window height
set winminheight=0

" Ctrl + h/j/k/l to move to window left/down/up/right
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Ctrl + n to toggle full/split view (custom function)
nnoremap <C-N> :call SplitFullToggle()<cr>
let g:split_is_full = 0
function! SplitFullToggle()
    if g:split_is_full
        echo "equalize"
        wincmd =
        let g:split_is_full = 0
    else
        echo "maximize"
        exe "normal \<C-W>_\<C-W>|"
        let g:split_is_full = 1
    endif
endfunction

" ================================================
" Code Folding
" ================================================

" Use indentation to define folds
set foldmethod=indent

" Open all folds by default
set foldlevel=99

" Space to toggle folds
nnoremap <space> za

" ================================================
" Plugin Management with vim-plug
" ================================================

call plug#begin('~/.vim/plugged')

  " Python Plugins
  Plug 'tmhedberg/SimpylFold'

if has('nvim')
  " General UI Plugins
  Plug 'nvim-lualine/lualine.nvim'
  Plug 'nvim-tree/nvim-web-devicons'

  " Treesitter for better syntax highlighting and parsing
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

  " File Navigation and Fuzzy Finder
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'

  " File Explorer
  Plug 'nvim-tree/nvim-tree.lua'

  " Autocompletion and Snippets
  Plug 'hrsh7th/nvim-cmp'
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-nvim-lsp-signature-help'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'L3MON4D3/LuaSnip', {'tag': 'v2.*', 'do': 'make install_jsregexp'}

  " LSP Configuration
  Plug 'neovim/nvim-lspconfig'

  " Git integration and key helper
  Plug 'lewis6991/gitsigns.nvim'
  Plug 'folke/which-key.nvim'
endif

  " Theme
  Plug 'sainnhe/sonokai'

  " Commenting
  Plug 'tpope/vim-commentary'

  " Formatter
  Plug 'prettier/vim-prettier', {
    \ 'do': 'npm install --frozen-lockfile --production',
    \ 'for': [
    \   'javascript',
    \   'typescript',
    \   'typescriptreact',
    \   'css',
    \   'less',
    \   'scss',
    \   'json',
    \   'graphql',
    \   'markdown',
    \   'vue',
    \   'svelte',
    \   'yaml',
    \   'html'
    \ ]
    \ }

  " Visual Enhancements
  Plug 'github/copilot.vim'

  " Python-specific plugins
  Plug 'psf/black', { 'branch': 'stable' }
  Plug 'raimon49/requirements.txt.vim'

call plug#end()

" ================================================
" Plugin Configurations
" ================================================

" Move all plugin-specific configurations here, including:
" - Syntastic
" - ALE
" - Vim-Commentary
" - SuperTab
" - Copilot

" --------------------------------
" Lualine Setup
" --------------------------------
if has('nvim')
  lua << EOF
  require('lualine').setup {
    sections = {
      lualine_a = {'mode'},
      lualine_b = {'filename', 'diagnostics'},
      lualine_c = {'branch', 'diff'},
      lualine_x = {'encoding', 'fileformat', 'filetype'},
      lualine_y = {'progress'},
      lualine_z = {'location'}
    }
  }
EOF
endif

" --------------------------------
" Nvim-Tree Setup
" --------------------------------
if has('nvim')
  lua << EOF
  require("nvim-tree").setup()
  vim.api.nvim_set_keymap(
      'n',
      'fm',
      '<cmd>NvimTreeToggle<cr>',
      { noremap = true, silent = true }
  )
EOF
endif

" --------------------------------
" Treesitter Setup
" --------------------------------
if has('nvim')
  lua << EOF
  require('nvim-treesitter.configs').setup {
    ensure_installed = { "python", "javascript", "typescript", "lua", "vim", "vimdoc" },
    sync_install = false,
    auto_install = true,
    highlight = {
      enable = true,
      additional_vim_regex_highlighting = false,
    },
  }
EOF
endif

" --------------------------------
" Telescope Keybindings
" --------------------------------
if has('nvim')
  nnoremap ff <cmd>Telescope find_files<cr>
  nnoremap fg <cmd>Telescope live_grep<cr>
endif

" --------------------------------
" Copilot Configuration
" --------------------------------

" Disable Copilot when in /dev/shm
au BufReadPre *
    \ if expand('%:p:h') =~ '/dev/shm'
    \ | let b:copilot_enabled = v:false
    \ | endif

" Ctrl + j to accept Copilot suggestions
imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true

" --------------------------------
" Theme Setup
" --------------------------------
let g:sonokai_style = 'atlantis'
let g:sonokai_better_performance = 1
colorscheme sonokai

" ================================================
" LSP and Autocompletion Setup
" ================================================
if has('nvim')
  lua << EOF
  -- LSP Configuration
  local lspconfig = require('lspconfig')
  
  -- LSP Mappings + Settings
  local opts = { noremap=true, silent=true }
  -- Basic diagnostic mappings
  vim.keymap.set('n', '<space>d', vim.diagnostic.open_float, opts)
  vim.keymap.set('n', '[d', vim.diagnostic.goto_prev, opts)
  vim.keymap.set('n', ']d', vim.diagnostic.goto_next, opts)
  vim.keymap.set('n', '<space>q', vim.diagnostic.setloclist, opts)

  -- Use an on_attach function to only map the following keys
  -- after the language server attaches to the current buffer
  local on_attach = function(client, bufnr)
    -- Enable completion triggered by <c-x><c-o>
    vim.api.nvim_buf_set_option(bufnr, 'omnifunc', 'v:lua.vim.lsp.omnifunc')

    -- Mappings to magical LSP functions!
    local bufopts = { noremap=true, silent=true, buffer=bufnr }
    vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, bufopts)
    vim.keymap.set('n', 'gd', vim.lsp.buf.definition, bufopts)
    vim.keymap.set('n', 'gk', vim.lsp.buf.hover, bufopts)  -- show documentation
    vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, bufopts)
    vim.keymap.set('n', 'gK', vim.lsp.buf.signature_help, bufopts)
    vim.keymap.set('n', '<space>D', vim.lsp.buf.type_definition, bufopts)
    vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, bufopts)  -- rename everywhere
    vim.keymap.set('n', '<space>ca', vim.lsp.buf.code_action, bufopts)  -- e.g. convert to named function
    vim.keymap.set('n', 'gr', vim.lsp.buf.references, bufopts) -- show where used
    vim.keymap.set('n', '<space>f', function() vim.lsp.buf.format { async = true } end, bufopts)
  end

  -- The nvim-cmp almost supports LSP's capabilities so You should advertise it to LSP servers..
  local capabilities = require('cmp_nvim_lsp').default_capabilities()

  -- Capabilities required for the visualstudio lsps (css, html, etc)
  capabilities.textDocument.completion.completionItem.snippetSupport = true

  -- Configure LSP servers
  -- TypeScript setup
  lspconfig.tsserver.setup({
    on_attach = on_attach,
    capabilities = capabilities,
    flags = {
      debounce_text_changes = 150,
    },
    settings = {
      typescript = {
        inlayHints = {
          includeInlayParameterNameHints = 'all',
          includeInlayParameterNameHintsWhenArgumentMatchesName = false,
          includeInlayFunctionParameterTypeHints = true,
          includeInlayVariableTypeHints = true,
          includeInlayPropertyDeclarationTypeHints = true,
          includeInlayFunctionLikeReturnTypeHints = true,
          includeInlayEnumMemberValueHints = true,
        }
      },
      javascript = {
        inlayHints = {
          includeInlayParameterNameHints = 'all',
          includeInlayParameterNameHintsWhenArgumentMatchesName = false,
          includeInlayFunctionParameterTypeHints = true,
          includeInlayVariableTypeHints = true,
          includeInlayPropertyDeclarationTypeHints = true,
          includeInlayFunctionLikeReturnTypeHints = true,
          includeInlayEnumMemberValueHints = true,
        }
      }
    }
  })

  -- Python setup
  lspconfig.pyright.setup({
    on_attach = on_attach,
    capabilities = capabilities,
    flags = {
      debounce_text_changes = 150,
    },
    settings = {
      python = {
        analysis = {
          autoSearchPaths = true,
          useLibraryCodeForTypes = true,
          diagnosticMode = "workspace"
        },
      }
    }
  })

  -- Configure nvim-cmp
  local cmp = require('cmp')
  local luasnip = require("luasnip")

  -- Set this check up for nvim-cmp tab mapping
  local has_words_before = function()
    local line, col = unpack(vim.api.nvim_win_get_cursor(0))
    return col ~= 0 and vim.api.nvim_buf_get_lines(0, line - 1, line, true)[1]:sub(col, col):match("%s") == nil
  end

  cmp.setup({
    snippet = {
      expand = function(args)
        luasnip.lsp_expand(args.body)
      end,
    },
    mapping = {
      ['<C-p>'] = cmp.mapping.select_prev_item(),
      ['<C-n>'] = cmp.mapping.select_next_item(),
      ['<C-d>'] = cmp.mapping.scroll_docs(-4),
      ['<C-f>'] = cmp.mapping.scroll_docs(4),
      ['<C-Space>'] = cmp.mapping.complete(),
      ['<C-e>'] = cmp.mapping.close(),
      ['<CR>'] = cmp.mapping.confirm({
        behavior = cmp.ConfirmBehavior.Replace,
        select = true,
      }),
      ["<Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_next_item()
        elseif luasnip.expand_or_jumpable() then
          luasnip.expand_or_jump()
        elseif has_words_before() then
          cmp.complete()
        else
          fallback()
        end
      end, { "i", "s" }),
      ["<S-Tab>"] = cmp.mapping(function(fallback)
        if cmp.visible() then
          cmp.select_prev_item()
        elseif luasnip.jumpable(-1) then
          luasnip.jump(-1)
        else
          fallback()
        end
      end, { "i", "s" }),
    },
    sources = {
      { name = 'nvim_lsp' },
      { name = 'nvim_lsp_signature_help' },
      { name = 'luasnip' },
      { name = 'buffer' },
      { name = 'path' }
    },
  })

  -- Luasnip setup
  require("luasnip.loaders.from_lua").lazy_load()
  vim.api.nvim_set_keymap("i", "<C-n>", "<Plug>luasnip-next-choice", {})
  vim.api.nvim_set_keymap("s", "<C-n>", "<Plug>luasnip-next-choice", {})
  vim.api.nvim_set_keymap("i", "<C-p>", "<Plug>luasnip-prev-choice", {})
  vim.api.nvim_set_keymap("s", "<C-p>", "<Plug>luasnip-prev-choice", {})
EOF
endif

" ================================================
" Additional Plugin Configurations
" ================================================

" -------------------------------
" Vim-Commentary Mappings
" -------------------------------
" Space in visual mode to toggle comment
vmap <Space> gc

" ================================================
" Final Settings
" ================================================

" Always turn on sign column to prevent code from jiggling left/right
set signcolumn=yes

" Disable automatic file type indentation (handled by vim-plug)
filetype indent off

" Python-specific settings
augroup python_files
    autocmd!
    " Enable Black formatting on save
    autocmd BufWritePre *.py Black
    " Set Python path for Neovim
    if has('nvim') && !empty($VIRTUAL_ENV)
        let g:python3_host_prog = $VIRTUAL_ENV . '/bin/python'
    endif
augroup END

" ================================================
" Plugin Configurations
" ================================================

" Move all plugin-specific configurations here, including:
" - Syntastic
" - ALE
" - Vim-Commentary
" - SuperTab
" - Copilot

" --------------------------------
" Git Signs Configuration
" --------------------------------
if has('nvim')
  lua << EOF
  require('gitsigns').setup()
EOF
endif

" --------------------------------
" Which-key Configuration
" --------------------------------
if has('nvim')
  lua << EOF
  require('which-key').setup()
EOF
endif

" Replace current Black configuration with:
augroup python_formatting
    autocmd!
    " Format on save if Black is available
    autocmd BufWritePre *.py if executable('black') | 
        \ silent! execute '!black --quiet %' |
        \ endif
    " Show formatting errors if any
    autocmd BufWritePost *.py if v:shell_error | echohl WarningMsg |
        \ echo 'Black formatting failed' |
        \ echohl None |
        \ endif
augroup END

" Add pipenv configuration
augroup pipenv_settings
    autocmd!
    " Set Python path for Neovim when in a pipenv environment
    if has('nvim')
        let $PYTHONPATH = system('pipenv --venv 2>/dev/null')
        if v:shell_error == 0
            let g:python3_host_prog = substitute(system('pipenv --py'), '\n\+$', '', '')
        endif
    endif
augroup END