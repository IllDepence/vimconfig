" ================================================
" Basic Setup
" ================================================

" Disable Vi compatibility mode to enable more advanced features
set nocompatible

" Set file encoding to UTF-8
set encoding=utf-8

" Convert tabs to spaces, 4 for tab key, 4 for autoindent
set expandtab
set tabstop=4
set shiftwidth=4

" Highlight all search results
set hlsearch

" Indicate tabs as ⁐⁐ and trailing spaces as ·
set list
exec "set listchars=tab:\u2050\u2050,trail:\uB7"

" Prevent mouse clicks from changing cursor position
" (Makes selecting to copy without holding shift possible)
set mouse=r

" Enable syntax highlighting
syntax on

" Full syntax highlighting for Python
let python_highlight_all=1

" Configure backspace key to work in various contexts
set backspace=indent,eol,start

" Faster startup
let g:python3_host_prog = system('which python3')  " Update this line
set lazyredraw                                " Don't redraw while executing macros

" Always turn on sign column to prevent code from jiggling left/right
set signcolumn=yes

" Disable automatic file type indentation (handled by vim-plug)
filetype indent off

" ================================================
" File Specific Settings
" ================================================

" Python Indentation
au BufNewFile,BufRead *.py
    \ set tabstop=4
    \| set softtabstop=4
    \| set shiftwidth=4
    \| set fileformat=unix
    \| set expandtab
    \| set autoindent

" JavaScript, TypeScript, HTML, CSS Indentation
au BufNewFile,BufRead *.js,*.ts,*.tsx,*.html,*.css,*.scss
    \ set tabstop=2
    \| set softtabstop=2
    \| set shiftwidth=2
    \| set fileformat=unix

" ================================================
" Split Window Settings
" ================================================

" Minimum window height
set winminheight=0

" Ctrl + h/j/k/l to move to window left/down/up/right
nnoremap <C-J> <C-W><C-J>
nnoremap <C-K> <C-W><C-K>
nnoremap <C-L> <C-W><C-L>
nnoremap <C-H> <C-W><C-H>

" Ctrl + n to toggle full/split view (custom function)
nnoremap <C-N> :call SplitFullToggle()<cr>
let g:split_is_full = 0
function! SplitFullToggle()
    if g:split_is_full
        echo "equalize"
        wincmd =
        let g:split_is_full = 0
    else
        echo "maximize"
        exe "normal \<C-W>_\<C-W>|"
        let g:split_is_full = 1
    endif
endfunction

" ================================================
" Code Folding
" ================================================

" Use indentation to define folds
set foldmethod=indent

" Open all folds by default
set foldlevel=99

" Space to toggle folds
nnoremap <space> za

" ================================================
" Plugin Management with vim-plug
" ================================================

call plug#begin('~/.vim/plugged')

  " Python Plugins
  Plug 'tmhedberg/SimpylFold'

if has('nvim')
  " General UI Plugins
  Plug 'nvim-lualine/lualine.nvim'
  Plug 'nvim-tree/nvim-web-devicons'

  " Treesitter for better syntax highlighting and parsing
  Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

  " File Navigation and Fuzzy Finder
  Plug 'nvim-lua/plenary.nvim'
  Plug 'nvim-telescope/telescope.nvim'

  " File Explorer
  Plug 'nvim-tree/nvim-tree.lua'

  " Autocompletion and Snippets
  Plug 'hrsh7th/nvim-cmp'
  Plug 'hrsh7th/cmp-nvim-lsp'
  Plug 'hrsh7th/cmp-nvim-lsp-signature-help'
  Plug 'hrsh7th/cmp-buffer'
  Plug 'hrsh7th/cmp-path'
  Plug 'L3MON4D3/LuaSnip', {'tag': 'v2.*', 'do': 'make install_jsregexp'}

  " LSP Configuration
  Plug 'neovim/nvim-lspconfig'

  " Git integration and key helper
  Plug 'lewis6991/gitsigns.nvim'
  Plug 'folke/which-key.nvim'

  " Prettier plugin for Neovim
  Plug 'prettier/vim-prettier', {
    \ 'do': 'npm install --frozen-lockfile --production',
    \ 'for': [
    \   'javascript',
    \   'typescript',
    \   'typescriptreact',
    \   'css',
    \   'less',
    \   'scss',
    \   'json',
    \   'graphql',
    \   'markdown',
    \   'vue',
    \   'svelte',
    \   'yaml',
    \   'html'
    \ ]
    \ }
endif

  " Theme
  Plug 'sainnhe/sonokai'

  " Commenting
  Plug 'tpope/vim-commentary'

  " Visual Enhancements
  Plug 'github/copilot.vim'

  " Python-specific plugins
  Plug 'psf/black', { 'branch': 'stable' }
  Plug 'raimon49/requirements.txt.vim'

call plug#end()

" --------------------------------
" Copilot Configuration
" --------------------------------

" Disable Copilot when in /dev/shm
au BufReadPre *
    \ if expand('%:p:h') =~ '/dev/shm'
    \ | let b:copilot_enabled = v:false
    \ | endif

" Ctrl + j to accept Copilot suggestions
imap <silent><script><expr> <C-J> copilot#Accept("\<CR>")
let g:copilot_no_tab_map = v:true

" --------------------------------
" Theme Setup
" --------------------------------
let g:sonokai_style = 'atlantis'
let g:sonokai_better_performance = 1
colorscheme sonokai

" -------------------------------
" Vim-Commentary Mappings
" -------------------------------
" Space in visual mode to toggle comment
vmap <Space> gc
